   1               		.file	"minipov.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
  73               	.global	delay_ms
  75               	delay_ms:
  76               		.stabd	46,0,0
   1:minipov.c     **** #include <avr/io.h>      // this contains all the IO port definitions
   2:minipov.c     **** #include <avr/interrupt.h>
   3:minipov.c     **** #include <avr/signal.h>
   4:minipov.c     **** #include <util/delay.h>
   5:minipov.c     **** 
   6:minipov.c     **** void delay_ms( uint16_t milliseconds)
   7:minipov.c     **** {
  78               	.LM0:
  79               	.LFBB1:
  80               	/* prologue: function */
  81               	/* frame size = 0 */
  82               	/* stack size = 0 */
  83               	.L__stack_usage = 0
   8:minipov.c     ****    for( ; milliseconds > 0; milliseconds--)
  85               	.LM1:
  86 0000 00C0      		rjmp .L2
  87               	.L3:
  88               	.LBB4:
  89               	.LBB5:
  91               	.Ltext1:
   1:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2189 2010-10-13 09:39:34Z aboyapati $ */
  34:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /**
  99:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    \ingroup util_delay
 100:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 101:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 102:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 103:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 104:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 105:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 106:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 107:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 108:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 109:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 110:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 111:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 112:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 113:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 115:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 116:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 117:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 118:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 119:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 120:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 121:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 122:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 123:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 124:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 125:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 126:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 127:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 128:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay
 129:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    although this will be deprecated in future.
 130:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 131:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****  */
 132:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** void
 133:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 134:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** {
 135:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 136:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	double __tmp ; 
 137:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && !defined(__DELAY_BACKWARD_COMPATIBLE__)
 138:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 139:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 140:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 141:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 142:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 143:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 144:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 145:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 146:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 147:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 148:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#else
 149:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		//round up by default
 150:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 151:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#endif
 152:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  93               	.LM2:
  94 0002 EFEC      		 ldi r30,lo8(1999)
  95 0004 F7E0      	    ldi r31,hi8(1999)
  96 0006 3197      	    1:sbiw r30,1
  97 0008 01F4      	    brne 1b
  98 000a 00C0      		rjmp .
  99 000c 0000      		nop
 100               	.LBE5:
 101               	.LBE4:
 103               	.Ltext2:
 105               	.LM3:
 106 000e 0197      		sbiw r24,1
 107               	.L2:
 109               	.LM4:
 110 0010 0097      		sbiw r24,0
 111 0012 01F4      		brne .L3
 112               	/* epilogue start */
   9:minipov.c     ****    {
  10:minipov.c     ****       _delay_ms( 1);
  11:minipov.c     ****    }
  12:minipov.c     **** } 
 114               	.LM5:
 115 0014 0895      		ret
 117               	.Lscope1:
 119               		.stabd	78,0,0
 121               	.global	__vector_4
 123               	__vector_4:
 124               		.stabd	46,0,0
  13:minipov.c     **** 
  14:minipov.c     **** #define TIMER1_PRESCALE_1 1
  15:minipov.c     **** #define TIMER1_PRESCALE_8 2
  16:minipov.c     **** #define TIMER1_PRESCALE_64 3
  17:minipov.c     **** #define TIMER1_PRESCALE_256 4
  18:minipov.c     **** #define TIMER1_PRESCALE_1024 5
  19:minipov.c     **** 
  20:minipov.c     **** // We use these macros because binary constants arent always supported. ugh.
  21:minipov.c     **** #define HEX__(n) 0x##n##UL
  22:minipov.c     **** #define B8__(x) ((x&0x0000000FLU)?1:0)  \
  23:minipov.c     ****                +((x&0x000000F0LU)?2:0)  \
  24:minipov.c     ****                +((x&0x00000F00LU)?4:0)  \
  25:minipov.c     ****                +((x&0x0000F000LU)?8:0)  \
  26:minipov.c     ****                +((x&0x000F0000LU)?16:0) \
  27:minipov.c     ****                +((x&0x00F00000LU)?32:0) \
  28:minipov.c     ****                +((x&0x0F000000LU)?64:0) \
  29:minipov.c     ****                +((x&0xF0000000LU)?128:0)
  30:minipov.c     **** #define B8(d) ((unsigned char)B8__(HEX__(d)))
  31:minipov.c     **** 
  32:minipov.c     **** const static int image[] = {
  33:minipov.c     ****   B8(00111100),
  34:minipov.c     ****   B8(00000100),
  35:minipov.c     ****   B8(00111000),
  36:minipov.c     ****   B8(00000100),
  37:minipov.c     ****   B8(00111000),
  38:minipov.c     ****   B8(00000000),
  39:minipov.c     ****   B8(00111101),
  40:minipov.c     ****   B8(00000000),
  41:minipov.c     ****   B8(00111100),
  42:minipov.c     ****   B8(00000100),
  43:minipov.c     ****   B8(00000100),
  44:minipov.c     ****   B8(00111000),
  45:minipov.c     ****   B8(00000000),
  46:minipov.c     ****   B8(00111101),
  47:minipov.c     ****   B8(00000000),
  48:minipov.c     ****   B8(11111100),
  49:minipov.c     ****   B8(00100100),
  50:minipov.c     ****   B8(00100100),
  51:minipov.c     ****   B8(00011000),
  52:minipov.c     ****   B8(00000000),
  53:minipov.c     ****   B8(00011000),
  54:minipov.c     ****   B8(00100100),
  55:minipov.c     ****   B8(00100100),
  56:minipov.c     ****   B8(00011000),
  57:minipov.c     ****   B8(00000000),
  58:minipov.c     ****   B8(00000100),
  59:minipov.c     ****   B8(00111000),
  60:minipov.c     ****   B8(00010000),
  61:minipov.c     ****   B8(00001100),
  62:minipov.c     ****   B8(00000000),
  63:minipov.c     ****   B8(00101111),
  64:minipov.c     ****   B8(00000000),
  65:minipov.c     ****   B8(00000000),
  66:minipov.c     ****   B8(00000000),
  67:minipov.c     ****   B8(00000000),
  68:minipov.c     ****   B8(00000000),
  69:minipov.c     ****   B8(00000000),
  70:minipov.c     **** };
  71:minipov.c     **** 
  72:minipov.c     **** #define NUM_ELEM(x) (sizeof (x) / sizeof (*(x)))
  73:minipov.c     **** int imagesize = NUM_ELEM(image);
  74:minipov.c     **** 
  75:minipov.c     **** // this function is called when timer1 compare matches OCR1A
  76:minipov.c     **** uint8_t j = 0;
  77:minipov.c     **** SIGNAL( SIG_TIMER1_COMPA ) {
 126               	.LM6:
 127               	.LFBB2:
 128 0016 1F92      		push __zero_reg__
 129 0018 0F92      		push r0
 130 001a 0FB6      		in r0,__SREG__
 131 001c 0F92      		push r0
 132 001e 1124      		clr __zero_reg__
 133 0020 2F93      		push r18
 134 0022 3F93      		push r19
 135 0024 8F93      		push r24
 136 0026 9F93      		push r25
 137 0028 EF93      		push r30
 138 002a FF93      		push r31
 139               	/* prologue: Signal */
 140               	/* frame size = 0 */
 141               	/* stack size = 9 */
 142               	.L__stack_usage = 9
  78:minipov.c     ****   if (j >= imagesize) 
 144               	.LM7:
 145 002c 2091 0000 		lds r18,j
 146 0030 30E0      		ldi r19,lo8(0)
 147 0032 8091 0000 		lds r24,imagesize
 148 0036 9091 0000 		lds r25,imagesize+1
 149 003a 2817      		cp r18,r24
 150 003c 3907      		cpc r19,r25
 151 003e 04F0      		brlt .L5
  79:minipov.c     ****     j = 0;
 153               	.LM8:
 154 0040 1092 0000 		sts j,__zero_reg__
 155               	.L5:
  80:minipov.c     **** 
  81:minipov.c     ****   PORTB = image[j];
 157               	.LM9:
 158 0044 8091 0000 		lds r24,j
 159 0048 E82F      		mov r30,r24
 160 004a F0E0      		ldi r31,lo8(0)
 161 004c EE0F      		lsl r30
 162 004e FF1F      		rol r31
 163 0050 E050      		subi r30,lo8(-(image))
 164 0052 F040      		sbci r31,hi8(-(image))
 165 0054 9081      		ld r25,Z
 166 0056 98BB      		out 56-32,r25
  82:minipov.c     ****  
  83:minipov.c     ****   j++;
 168               	.LM10:
 169 0058 8F5F      		subi r24,lo8(-(1))
 170 005a 8093 0000 		sts j,r24
 171               	/* epilogue start */
  84:minipov.c     **** }
 173               	.LM11:
 174 005e FF91      		pop r31
 175 0060 EF91      		pop r30
 176 0062 9F91      		pop r25
 177 0064 8F91      		pop r24
 178 0066 3F91      		pop r19
 179 0068 2F91      		pop r18
 180 006a 0F90      		pop r0
 181 006c 0FBE      		out __SREG__,r0
 182 006e 0F90      		pop r0
 183 0070 1F90      		pop __zero_reg__
 184 0072 1895      		reti
 186               	.Lscope2:
 188               		.stabd	78,0,0
 190               	.global	main
 192               	main:
 193               		.stabd	46,0,0
  85:minipov.c     **** 
  86:minipov.c     **** int main(void) {
 195               	.LM12:
 196               	.LFBB3:
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 0 */
 200               	.L__stack_usage = 0
  87:minipov.c     **** 
  88:minipov.c     ****   DDRB = 0xFF;       // set all 8 pins on port B to outputs
 202               	.LM13:
 203 0074 8FEF      		ldi r24,lo8(-1)
 204 0076 87BB      		out 55-32,r24
  89:minipov.c     **** 
  90:minipov.c     ****   /*
  91:minipov.c     ****     the frequency of the interrupt overflow is determined by the 
  92:minipov.c     ****     prescaler and overflow value.
  93:minipov.c     ****     freq = clock_frequency / ( 2 * prescaler * overflow_val)
  94:minipov.c     ****     where prescaler can be 1, 8, 64, 256, or 1024
  95:minipov.c     ****     clock_freq is 8MHz
  96:minipov.c     ****     and overflow_val is 16bit
  97:minipov.c     **** 
  98:minipov.c     ****     the overflow value is placed in OCR1A, the prescale is set in TCCR1B
  99:minipov.c     ****     so for example:
 100:minipov.c     ****     A good POV frequency is around 400Hz
 101:minipov.c     ****     desired freq = 400Hz
 102:minipov.c     ****     clock freq = 8MHz
 103:minipov.c     ****     8MHz / (400Hz * 2) = 10000
 104:minipov.c     ****     since 10000 is less than 655536 (largest 16 bit number)
 105:minipov.c     ****     OCR1A = 10000 and the prescale is 1
 106:minipov.c     ****   */
 107:minipov.c     **** 
 108:minipov.c     ****   TCCR1B = (1 << WGM12) | TIMER1_PRESCALE_1;
 206               	.LM14:
 207 0078 89E0      		ldi r24,lo8(9)
 208 007a 8EBD      		out 78-32,r24
 109:minipov.c     ****   OCR1A = (uint16_t)10000;
 210               	.LM15:
 211 007c 80E1      		ldi r24,lo8(10000)
 212 007e 97E2      		ldi r25,hi8(10000)
 213 0080 9BBD      		out 74+1-32,r25
 214 0082 8ABD      		out 74-32,r24
 110:minipov.c     **** 
 111:minipov.c     ****   TIMSK |= 1 << OCIE1A;   // Output Compare Interrupt Enable (timer 1, OCR1A) 
 216               	.LM16:
 217 0084 89B7      		in r24,89-32
 218 0086 8064      		ori r24,lo8(64)
 219 0088 89BF      		out 89-32,r24
 112:minipov.c     **** 
 113:minipov.c     ****   sei();                 // Set Enable Interrupts
 221               	.LM17:
 222               	/* #APP */
 223               	 ;  113 "minipov.c" 1
 224 008a 7894      		sei
 225               	 ;  0 "" 2
 226               	/* #NOAPP */
 227               	.L7:
 228 008c 00C0      		rjmp .L7
 230               	.Lscope3:
 232               		.stabd	78,0,0
 233               	.global	imagesize
 234               		.data
 237               	imagesize:
 238 0000 2500      		.word	37
 239               	.global	j
 240               	.global	j
 241               		.section .bss
 244               	j:
 245 0000 00        		.skip 1,0
 246               		.data
 249               	image:
 250 0002 3C00      		.word	60
 251 0004 0400      		.word	4
 252 0006 3800      		.word	56
 253 0008 0400      		.word	4
 254 000a 3800      		.word	56
 255 000c 0000      		.word	0
 256 000e 3D00      		.word	61
 257 0010 0000      		.word	0
 258 0012 3C00      		.word	60
 259 0014 0400      		.word	4
 260 0016 0400      		.word	4
 261 0018 3800      		.word	56
 262 001a 0000      		.word	0
 263 001c 3D00      		.word	61
 264 001e 0000      		.word	0
 265 0020 FC00      		.word	252
 266 0022 2400      		.word	36
 267 0024 2400      		.word	36
 268 0026 1800      		.word	24
 269 0028 0000      		.word	0
 270 002a 1800      		.word	24
 271 002c 2400      		.word	36
 272 002e 2400      		.word	36
 273 0030 1800      		.word	24
 274 0032 0000      		.word	0
 275 0034 0400      		.word	4
 276 0036 3800      		.word	56
 277 0038 1000      		.word	16
 278 003a 0C00      		.word	12
 279 003c 0000      		.word	0
 280 003e 2F00      		.word	47
 281 0040 0000      		.word	0
 282 0042 0000      		.word	0
 283 0044 0000      		.word	0
 284 0046 0000      		.word	0
 285 0048 0000      		.word	0
 286 004a 0000      		.word	0
 290               		.text
 292               	.Letext0:
 293               	.global __do_copy_data
 294               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 minipov.c
     /tmp/cclO0cLj.s:2      *ABS*:000000000000003f __SREG__
     /tmp/cclO0cLj.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/cclO0cLj.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/cclO0cLj.s:5      *ABS*:0000000000000034 __CCP__
     /tmp/cclO0cLj.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cclO0cLj.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cclO0cLj.s:75     .text:0000000000000000 delay_ms
     /tmp/cclO0cLj.s:123    .text:0000000000000016 __vector_4
     /tmp/cclO0cLj.s:244    .bss:0000000000000000 j
     /tmp/cclO0cLj.s:237    .data:0000000000000000 imagesize
     /tmp/cclO0cLj.s:249    .data:0000000000000002 image
     /tmp/cclO0cLj.s:192    .text:0000000000000074 main

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
